package net.maidsafe.sample;

import it.sauronsoftware.junique.AlreadyLockedException;
import it.sauronsoftware.junique.JUnique;
import net.maidsafe.api.Client;
import net.maidsafe.api.Session;
import net.maidsafe.api.SystemURI;
import net.maidsafe.api.model.*;
import net.maidsafe.safe_app.AppExchangeInfo;
import net.maidsafe.safe_app.AuthReq;
import net.maidsafe.safe_app.ContainerPermissions;

import java.awt.*;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Base64;
import java.util.logging.Logger;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class Application {

    private static void connect(String appId, String response) {
        try {
            final DecodeResult decodeResult = Session.decodeIpcMessage(response).get();
            if (decodeResult.getClass().equals(AuthResponse.class)) {
                final AuthResponse authResponse = (AuthResponse) decodeResult;
                Session session = Client.connect(appId, authResponse.getAuthGranted()).get();
                System.out.println("Connected to the SAFE Network");
            } else {
                throw new Exception("Could not connect to the SAFE Network");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    public static void main(String[] args) {
        Logger logger = Logger.getLogger("ApplicationLog");
        try {
            // initialize an net.maidsafe.sample.Application instance
            App app = new App("net.maidsafe.tutorials.java", "Java CLI Example",
                  "Maidsafe.net", "0.1.0");

            // Acquire lock using net.maidsafe.sample.Application ID to maintain a single application instance
            try {
                JUnique.acquireLock(app.getId(), s -> {
                    // Handle message from second instance
                    logger.info("Message recieved: " + s + "\n");
                    s = s.replaceAll(".*:", "");
                    logger.info("Auth URI : " + s + "\n");
                    System.out.println("Auth URI Recieved");
                    Application.connect(app.getId(), s);
                    return "done";
                });
            } catch (AlreadyLockedException e) { // net.maidsafe.sample.Application already running
                // Send URI to first instance as message
                if (args.length != 0) {
                    JUnique.sendMessage(app.getId(), args[0]);
                }
                System.exit(0);
            }
            // Register event for Mac
            if (System.getProperty("os.name").toLowerCase().contains("mac")) {
                OSXAppleEventHelper.setOpenURIAppleEventHandler(url -> JUnique.sendMessage(app.getId(), url.toString()));
            }

            // Generate Auth Request with app details & required permissions
            AppExchangeInfo appExchangeInfo = new AppExchangeInfo(app.getId(), "",
                  app.getName(), app.getVendor());
            ContainerPermissions[] permissions = new ContainerPermissions[0];
            AuthReq authReq = new AuthReq(appExchangeInfo, true,
                  permissions, permissions.length, 0);

            // Load the native libraries into memory
            logger.info("Loading native libraries..");
            Client.load();
            SystemURI.load();

            // Encode AuthReq and prepend with safe-auth://
            Request request = Client.encodeAuthReq(authReq).get();
            String url = "safe-auth://" + request.getUri();

            // Register base64 encoded net.maidsafe.sample.Application ID prepended with "safe-" as application's custom URI
            String scheme = "safe-" + Base64.getUrlEncoder().encodeToString(app.getId().getBytes())
                  .replaceAll("/+", "-")
                  .replaceAll("//", "_")
                  .replaceAll("=", "").toLowerCase();

            String exePath = new File(Application.class.getProtectionDomain().getCodeSource().getLocation().toURI()).getPath();
            if (System.getProperty("os.name").toLowerCase().contains("win")) {
                File f = new File(System.getenv("JAVA_HOME"));
                f = new File(f, "bin");
                f = new File(f, "java");
                SystemURI.install(app, new String[]{f.getAbsolutePath(), "-jar", exePath}, "", scheme);
            }
            else {
                SystemURI.install(app, new String[]{"java", "-jar", exePath}, "", scheme);
            }


            // Open the url - i.e. send the request to the Authenticator
            if (Desktop.isDesktopSupported()) {
                Desktop desktop = Desktop.getDesktop();
                try {
                    desktop.browse(new URI(url));
                } catch (IOException | URISyntaxException e) {
                    e.printStackTrace();
                }
            } else {
                Runtime runtime = Runtime.getRuntime();
                try {
                    runtime.exec("xdg-open " + url);
                } catch (IOException e) {
                }
            }
            System.in.read();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
