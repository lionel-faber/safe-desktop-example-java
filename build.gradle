import org.apache.tools.ant.taskdefs.condition.Os

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.10/userguide/tutorial_java_projects.html
 */

plugins {
  // Apply the java plugin to add support for Java
  id 'java'

  // Apply the application plugin to add support for building an application
  id 'application'
}

version '0.0.1'
// Define the main class for the application
mainClassName = 'Application'

dependencies {
    // This dependency is found on compile classpath of this component and consumers.
    compile 'com.google.guava:guava:23.0'
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    // https://mvnrepository.com/artifact/it.sauronsoftware/junique
    compile group: 'it.sauronsoftware', name: 'junique', version: '1.0.4'
    compile group: 'com.github.jnr', name: 'jnr-ffi', version: '2.1.8'

  // Use JUnit test framework
    testCompile 'junit:junit:4.12'
}

static def getCombinations() {
  def platforms = ['osx', 'linux', 'win']
  def variants = ['mock', 'non-mock']
  def architectures = ['x64']
  [platforms, architectures, variants].combinations().findAll()
}
def libVersion = "0.1.0"
def sysUriVersion = "0.0.1"
tasks.addRule('Pattern: pack-<ID>') { String taskName ->
  if (taskName.startsWith('pack')) {
    task(taskName, type: Jar) {
      manifest {
        attributes(
            'Main-Class': 'net.maidsafe.sample.Application'
        )
      }
      def args = name.split('-')
      String platform = args[1]
      String arch = args[2]
      boolean isMock = args[3] == "mock"
      from sourceSets.main.output
      from sourceSets.main.resources
      from zipTree("${projectDir}/libs/safe-app${isMock ? '-mock' : ''}-${libVersion}-${platform}-${arch}.jar")
      from zipTree("${projectDir}/libs/system_uri-${sysUriVersion}-${platform}-${arch}.jar")
      from {
        configurations.compile.collect {
          it.isDirectory() ? it : zipTree(it)
        }
      }
      with jar
      baseName = "${project.name}${isMock ? '-mock' : ''}"
      classifier = "${platform}-${arch}"
      version = project.version
    }
  }
}
task('pack') {
  def tasks = getCombinations().collect { "pack-${it[0]}-${it[1]}-${it[2]}" }
  dependsOn << tasks
  doLast {
    println "Deleting default Jar..."
    File defaultJar = new File("${project.buildDir}/libs/Safe-Todo-${project.version}.jar")
    if (defaultJar.exists()) {
      defaultJar.delete()
    }
  }
}
static def getOs() {
  if(Os.isFamily(Os.FAMILY_WINDOWS))
    return "win"
  else if(Os.isFamily(Os.FAMILY_UNIX))
    return "linux"
  else if(Os.isFamily(Os.FAMILY_MAC))
    return "osx"
}
task('runApp', type: JavaExec) {
  def os = getOs()
  dependsOn << "pack-${os}-x64-mock"
  main = "-jar";
  args = ["build/libs/${project.name}-mock-${project.version}-${os}-x64.jar"];
}


// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}
